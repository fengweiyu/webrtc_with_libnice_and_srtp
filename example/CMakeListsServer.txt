cmake_minimum_required (VERSION 2.8)

SET(CMAKE_TOOLCHAIN_FILE "build/ToolChain.cmake")
#SET(CMAKE_SYSTEM_NAME "Linux")
#SET(CMAKE_C_COMPILER "gcc")
#SET(CMAKE_CXX_COMPILER "g++")
#SET(CMAKE_ToolChain "x64")

project (WebRTC)
SET(USE_STATIC_LIB_LINKAGE ON)

#SET(CMAKE_C_FLAGS "-g")
SET(CMAKE_CXX_FLAGS "-g")

if(${CMAKE_ToolChain} STREQUAL "")

else()

endif()

SET(SRC_LIST
	webrtc_server_main.cpp	
	)
		
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}
	${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/webrtc_server/include
	)

ADD_EXECUTABLE(webrtcServer ${SRC_LIST})

TARGET_LINK_LIBRARIES(webrtcServer ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/lib/libwebrtc.a)
TARGET_LINK_LIBRARIES(webrtcServer ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/base64/libbase64.a)
TARGET_LINK_LIBRARIES(webrtcServer ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/webrtc_server/libwebrtc_server.a)
TARGET_LINK_LIBRARIES(webrtcServer ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/rtp/librtp.a)
TARGET_LINK_LIBRARIES(webrtcServer ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/media/libmedia.a)
TARGET_LINK_LIBRARIES(webrtcServer ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/http/libhttp.a)
TARGET_LINK_LIBRARIES(webrtcServer ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/net/libnet.a)

TARGET_LINK_LIBRARIES(webrtcServer ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/cJSON/libcjson.a)
#第三方库(libwebrtc.a中包含了这些库暂时注释掉)
if(${CMAKE_ToolChain} STREQUAL "")

TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/cJSON/libcjson.a)
TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/libsrtp/lib/libsrtp2.a)
TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/usrsctp/lib/libusrsctp.a)
#so
#//初始脚本ln -s到libglib-2.0.so快捷方式操作，或者直接拷贝成libglib-2.0.so
TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/libnice/lib/libnice.a)

TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/openssl/lib/libssl.a)
TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/openssl/lib/libcrypto.a)

TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/glib/lib/libgio-2.0.a)
TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/glib/lib/libgobject-2.0.a)
TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/glib/lib/libgthread-2.0.a)
TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/glib/lib/libgmodule-2.0.a)
#glib是依赖的底层，放在后面
TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/glib/lib/libglib-2.0.a)
TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/libffi/lib/libffi.a)
TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/zlib/lib/libz.a)
#TARGET_LINK_LIBRARIES(webrtc ${PROJECT_SOURCE_DIR}/../build/${CMAKE_ToolChain}/third_lib/glib/libglib-2.0.so) #优化后才这个路径

endif()


TARGET_LINK_LIBRARIES(webrtcServer -pthread -lm -lrt -ldl -lresolv -static)

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/build)
#TARGET_LINK_LIBRARIES(crnode log4cpp thrift)










